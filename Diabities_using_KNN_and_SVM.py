# -*- coding: utf-8 -*-
"""Diabities.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iTqtrKl3ar5cZNNQC_4IBmtEG3-7ZGQq
"""



import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

diabities_dataset=pd.read_csv('/content/diabetes.csv')

print(diabities_dataset)

diabities_dataset.head()

diabities_dataset.shape

diabities_dataset.isnull().sum()
#so we see the dataset has no null values

X=diabities_dataset.drop('Outcome',axis=1)
Y=diabities_dataset['Outcome']

#As we see that the range of data is varying we need to standardise the data
standard=StandardScaler()
X=standard.fit_transform(X)

print(X)
print(Y)

import seaborn as sns
sns.pairplot(diabities_dataset,hue='Outcome')

# we see that the data clearly overlaps so we cannot use logistic regression here.
# Random Forest or Decison Tree will be a better option here

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=4)

model=svm.SVC()

model.fit(X_train,Y_train)

Y_predict=model.predict(X_test)

print(Y_predict)

val=accuracy_score(Y_test,Y_predict)
print(val)

knn_classifier=KNeighborsClassifier(n_neighbors=3)
knn_classifier.fit(X_train,Y_train)
KNN_predict=knn_classifier.predict(X_test)

knn_accuracy=accuracy_score(Y_test,KNN_predict)
print(knn_accuracy)

randomforest=RandomForestClassifier(max_leaf_nodes=50,max_depth=50)
randomforest.fit(X_train,Y_train)

rfpredict=randomforest.predict(X_test)
print(accuracy_score(Y_test,rfpredict))

decisontree=DecisionTreeClassifier(max_depth=150,max_leaf_nodes=150)
decisontree.fit(X_train,Y_train)

dtpredict=decisontree.predict(X_test)
print(accuracy_score(Y_test,dtpredict))

"""<!-- Thus we see that the Random Forest Classifier works the best -->"""